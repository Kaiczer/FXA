ideas = {
	economy = {
		law = yes
		use_list_view = yes

		undisturbed_isolation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea undisturbed_isolation" }
			on_remove = { set_variable = { previous_economic_law = token:undisturbed_isolation } }
			level = 7
			removal_cost = -1

			allowed = { always = no }
			cancel_if_invalid = no

			modifier = {
				consumer_goods_expected_value = 0.50
				production_speed_industrial_complex_factor = -0.5
				production_speed_arms_factory_factor = -0.5
				production_speed_dockyard_factor = -0.5
				conversion_cost_civ_to_mil_factor = 0.5
				conversion_cost_mil_to_civ_factor = 0.5
				generate_wargoal_tension = 1.00
				lend_lease_tension = 0.50
				send_volunteers_tension = 0.50
				guarantee_tension = 0.75
				max_fuel_factor = -0.45
				fuel_gain_factor = -0.6
				agency_upgrade_time = 1.0
			}

			allowed_to_remove = {
				OR = {
					has_war_support > 0.5
					has_war = yes
				}
			}

			ai_will_do = { factor = 0 }
		}

		isolation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea isolation" }
			on_remove = { set_variable = { previous_economic_law = token:isolation } }
			level = 6
			removal_cost = -1

			allowed = { always = no }
			cancel_if_invalid = no

			modifier = {
				consumer_goods_expected_value = 0.4
				production_speed_industrial_complex_factor = -0.4
				production_speed_arms_factory_factor = -0.4
				production_speed_dockyard_factor = -0.4
				conversion_cost_civ_to_mil_factor = 0.4
				conversion_cost_mil_to_civ_factor = 0.4
				generate_wargoal_tension = 1.00
				lend_lease_tension = 0.3
				send_volunteers_tension = 0.3
				guarantee_tension = 0.5
				max_fuel_factor = -0.35
				fuel_gain_factor = -0.5
				agency_upgrade_time = 0.8
			}

			allowed_to_remove = {
				OR = {
					has_war_support > 0.75
					has_war = yes
				}
			}

			ai_will_do = { factor = 0 }
		}

		civilian_economy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea civilian_economy" }
			on_remove = { set_variable = { previous_economic_law = token:civilian_economy } }
			level = 5
			removal_cost = -1

			modifier = {
				political_power_factor = 0.08
				consumer_goods_expected_value = 0.35
				production_speed_industrial_complex_factor = -0.3
				production_speed_arms_factory_factor = -0.3
				conversion_cost_civ_to_mil_factor = 0.3
				conversion_cost_mil_to_civ_factor = 0.3
				max_fuel_factor = -0.25
				fuel_gain_factor = -0.4
			}

			default = yes
			cancel_if_invalid = no

			ai_will_do = { factor = 0 }
		}

		low_economic_mobilisation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea low_economic_mobilisation" }
			on_remove = { set_variable = { previous_economic_law = token:low_economic_mobilisation } }
			level = 4
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				low_economic_mobilisation_available = yes
			}

			modifier = {
				political_power_factor = 0.05
				consumer_goods_expected_value = 0.3
				production_speed_industrial_complex_factor = -0.1
				production_speed_arms_factory_factor = -0.1
				fuel_gain_factor = -0.25
			}

			ai_will_do = { factor = 600 }
		}

		partial_economic_mobilisation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea partial_economic_mobilisation" }
			on_remove = { set_variable = { previous_economic_law = token:partial_economic_mobilisation } }
			level = 3
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				partial_economic_mobilisation_available = yes
			}

			modifier = {
				political_power_factor = 0.03
				consumer_goods_expected_value = 0.25
				production_speed_arms_factory_factor = 0.1
				conversion_cost_civ_to_mil_factor = -0.1
				conversion_cost_mil_to_civ_factor = -0.1
				fuel_gain_factor = -0.1
			}

			ai_will_do = {
				factor = 700
				modifier = { #one step at a time
					factor = 0
					NOT = { has_idea = low_economic_mobilisation }
				}
			}
		}

		war_economy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea war_economy" }
			on_remove = { set_variable = { previous_economic_law = token:war_economy } }
			level = 2
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				war_economy_available = yes
			}

			modifier = {
				consumer_goods_expected_value = 0.2
				production_speed_arms_factory_factor = 0.2
				conversion_cost_civ_to_mil_factor = -0.2
				conversion_cost_mil_to_civ_factor = -0.2
			}

			ai_will_do = {
				factor = 60
				modifier = { #one step at a time
					factor = 0
					NOT = { has_idea = partial_economic_mobilisation }
				}
				modifier = {
					factor = 20
					manpower_per_military_factory > 3000
				}
			}
		}

		tot_economic_mobilisation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea tot_economic_mobilisation" }
			on_remove = { set_variable = { previous_economic_law = token:tot_economic_mobilisation } }
			level = 1
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				tot_economic_mobilisation_available = yes
			}

			modifier = {
				political_power_gain = -0.1
				consumer_goods_expected_value = 0.10
				conscription = -0.03
				production_speed_arms_factory_factor = 0.3
				conversion_cost_civ_to_mil_factor = -0.3
				conversion_cost_mil_to_civ_factor = -0.3
			}

			ai_will_do = {
				factor = 10
				modifier = { #one step at a time
					factor = 0
					NOT = { has_idea = war_economy }
				}
				modifier = { #don't increase if it would drop conscription to zero
					factor = 0
					OR = {
						target_conscription_amount < 0.03
						manpower_per_military_factory < 10000
					}
				}
				modifier = { #Weight will overly overtake war economy if the AI has plenty of manpower
					factor = 100
					manpower_per_military_factory > 15000
				}
			}
		}
	}

	trade_laws = {
		law = yes
		use_list_view = yes

		uncontrolled_exports = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea uncontrolled_exports" }
			on_remove = { set_variable = { previous_trade_law = token:uncontrolled_exports } }
			picture = isolation
			level = 5
			removal_cost = -1
			cancel_if_invalid = no

			allowed = { always = no }

			modifier = {
				min_export = 0.25
				consumer_goods_expected_value = 0.05
				civilian_intel_to_others = 40.0
				navy_intel_to_others = 40.0
				agency_upgrade_time = 0.15
				cic_construction_boost = 0.15
			}

			allowed_to_remove = {
				has_war = yes
			}
		}

		free_trade = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea free_trade" }
			on_remove = { set_variable = { previous_trade_law = token:free_trade } }
			level = 4

			removal_cost = -1

			modifier = {
				min_export = 0.8
				industrial_capacity_factory = 0.15
				industrial_capacity_dockyard = 0.15
				production_speed_buildings_factor = 0.15
				research_speed_factor = 0.1
				civilian_intel_to_others = 40.0
				navy_intel_to_others = 20.0
				cic_construction_boost_factor = 0.05
			}

			ai_will_do = {
				factor = 0.5
				modifier = {
					check_variable = { resource@steel > 0 }
					add = resource@steel
				}
				modifier = {
					check_variable = { resource@oil > 0 }
					add = resource@oil
				}
				modifier = {
					check_variable = { resource@rubber > 0 }
					add = resource@rubber
				}
				modifier = {
					check_variable = { resource@aluminium > 0 }
					add = resource@aluminium
				}
				modifier = {
					check_variable = { resource@tungsten > 0 }
					add = resource@tungsten
				}
				modifier = {
					check_variable = { resource@chromium > 0 }
					add = resource@chromium
				}
			}
		}

		export_focus = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea export_focus" }
			on_remove = { set_variable = { previous_trade_law = token:export_focus } }
			level = 3

			removal_cost = -1

			modifier = {
				min_export = 0.5
				industrial_capacity_factory = 0.1
				industrial_capacity_dockyard = 0.1
				production_speed_buildings_factor = 0.1
				research_speed_factor = 0.05
				civilian_intel_to_others = 20.0
				navy_intel_to_others = 10.0
				cic_construction_boost_factor = 0.1
			}

			default = yes

			ai_will_do = {
				factor = 1
				modifier = {
					check_variable = { resource_produced@steel > 0 }

					subtract_from_temp_variable = { steel_deficit = resource@steel }
					add = steel_deficit
				}
				modifier = {
					check_variable = { resource_produced@oil > 0 }

					subtract_from_temp_variable = { oil_deficit = resource@oil }
					add = oil_deficit
				}
				modifier = {
					check_variable = { resource_produced@rubber > 0 }

					subtract_from_temp_variable = { rubber_deficit = resource@rubber }
					add = rubber_deficit
				}
				modifier = {
					check_variable = { resource_produced@aluminium > 0 }

					subtract_from_temp_variable = { aluminium_deficit = resource@aluminium }
					add = aluminium_deficit
				}
				modifier = {
					check_variable = { resource_produced@tungsten > 0 }

					subtract_from_temp_variable = { tungsten_deficit = resource@tungsten }
					add = tungsten_deficit
				}
				modifier = {
					check_variable = { resource_produced@chromium > 0 }

					subtract_from_temp_variable = { chromium_deficit = resource@chromium }
					add = chromium_deficit
				}
			}
		}

		limited_exports = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea limited_exports" }
			on_remove = { set_variable = { previous_trade_law = token:limited_exports } }
			level = 2
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				OR = {
					has_idea = partial_economic_mobilisation
					has_idea = war_economy
					has_idea = tot_economic_mobilisation
				}
			}

			modifier = {
				min_export = 0.25
				industrial_capacity_factory = 0.05
				industrial_capacity_dockyard = 0.05
				production_speed_buildings_factor = 0.05
				research_speed_factor = 0.01
				civilian_intel_to_others = 10.0
				navy_intel_to_others = 5
				lend_lease_tension = 0.20
				cic_construction_boost_factor = -0.05
			}

			ai_will_do = {
				factor = 1
				modifier = {
					factor = 0
					is_major = no #only majors should choose limited exports
				}
				modifier = {
					factor = 0
					is_in_faction = yes #don't screw over your allies
				}
				modifier = {
					factor = 0
					has_war = no #if at peace, prioritise the bonuses
				}
				modifier = {
					check_variable = { resource_produced@steel > 0 }

					subtract_from_temp_variable = { steel_deficit = resource@steel }
					add = steel_deficit
				}
				modifier = {
					check_variable = { resource_produced@oil > 0 }

					subtract_from_temp_variable = { oil_deficit = resource@oil }
					add = oil_deficit
				}
				modifier = {
					check_variable = { resource_produced@rubber > 0 }

					subtract_from_temp_variable = { rubber_deficit = resource@rubber }
					add = rubber_deficit
				}
				modifier = {
					check_variable = { resource_produced@aluminium > 0 }

					subtract_from_temp_variable = { aluminium_deficit = resource@aluminium }
					add = aluminium_deficit
				}
				modifier = {
					check_variable = { resource_produced@tungsten > 0 }

					subtract_from_temp_variable = { tungsten_deficit = resource@tungsten }
					add = tungsten_deficit
				}
				modifier = {
					check_variable = { resource_produced@chromium > 0 }

					subtract_from_temp_variable = { chromium_deficit = resource@chromium }
					add = chromium_deficit
				}
			}
		}

		closed_economy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea closed_economy" }
			on_remove = { set_variable = { previous_trade_law = token:closed_economy } }
			level = 1
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				has_war = yes
				OR = {
					has_idea = war_economy
					has_idea = tot_economic_mobilisation
				}
			}

			modifier = {
				min_export = 0
				lend_lease_tension = 0.40
				cic_construction_boost = -0.1
			}

			rule = {
				can_access_market = no
				desc = can_not_access_market_closed_economy
			}

			ai_will_do = {
				factor = 1
				modifier = {
					factor = 0
					is_major = no #only majors should choose limited exports
				}
				modifier = {
					factor = 0
					is_in_faction = yes #don't screw over your allies
				}
				modifier = {
					factor = 0
					has_war = no #if at peace, prioritise the bonuses
				}
				modifier = {
					check_variable = { resource_produced@steel > 0 }

					subtract_from_temp_variable = { steel_deficit = resource@steel }
					add = steel_deficit
				}
				modifier = {
					check_variable = { resource_produced@oil > 0 }

					subtract_from_temp_variable = { oil_deficit = resource@oil }
					add = oil_deficit
				}
				modifier = {
					check_variable = { resource_produced@rubber > 0 }

					subtract_from_temp_variable = { rubber_deficit = resource@rubber }
					add = rubber_deficit
				}
				modifier = {
					check_variable = { resource_produced@aluminium > 0 }

					subtract_from_temp_variable = { aluminium_deficit = resource@aluminium }
					add = aluminium_deficit
				}
				modifier = {
					check_variable = { resource_produced@tungsten > 0 }

					subtract_from_temp_variable = { tungsten_deficit = resource@tungsten }
					add = tungsten_deficit
				}
				modifier = {
					check_variable = { resource_produced@chromium > 0 }

					subtract_from_temp_variable = { chromium_deficit = resource@chromium }
					add = chromium_deficit
				}
			}
		}
	}

	mobilization_laws = {
		law = yes
		use_list_view = yes

		disarmed_nation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea disarmed_nation" }
			on_remove = { set_variable = { previous_manpower_law = token:disarmed_nation } }
			level = 7
			removal_cost = -1
			cancel_if_invalid = no

			modifier = {
				conscription = 0.01
			}
		}

		volunteer_only = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea volunteer_only" }
			on_remove = { set_variable = { previous_manpower_law = token:volunteer_only } }
			level = 6
			removal_cost = -1
			cancel_if_invalid = no
			default = yes

			modifier = {
				conscription = 0.015
			}

			ai_will_do = { factor = 10 }
		}

		limited_conscription = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea limited_conscription" }
			on_remove = { set_variable = { previous_manpower_law = token:limited_conscription } }
			level = 5
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				limited_conscription_available = yes
			}

			modifier = {
				conscription = 0.025
			}

			ai_will_do = {
				factor = 10
				modifier = { #one step at a time
					factor = 0
					NOT = { has_idea = volunteer_only }
				}
				modifier = { # the economy is mobilised enough - conscript people!
					factor = 50
					OR = {
						has_idea = partial_economic_mobilisation
						has_idea = war_economy
					}
				}
				modifier = { #prio if low on manpower
					factor = 20
					manpower_per_military_factory < 1500
				}
			}
		}

		extensive_conscription = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea extensive_conscription" }
			on_remove = { set_variable = { previous_manpower_law = token:extensive_conscription } }
			level = 4
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				extensive_conscription_available = yes
			}

			modifier = {
				conscription = 0.05
				training_time_factor = 0.1
			}

			ai_will_do = {
				factor = 10
				modifier = { #one step at a time
					factor = 0
					NOT = { has_idea = limited_conscription }
				}
				modifier = {
					factor = 50  #The tag has enough equipment stockpiled but doesn't have manpower
					amount_manpower_in_deployment_queue < 40000   # Less than 4 divs in training
					has_equipment = { infantry_equipment > 5000 } # And has enough equipment in stockpile to train new divisions
				}
				modifier = { #prio if low on manpower
					factor = 20
					manpower_per_military_factory < 2000
				}
			}
		}

		service_by_requirement = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea service_by_requirement" }
			on_remove = { set_variable = { previous_manpower_law = token:service_by_requirement } }
			level = 3
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				service_by_requirement_available = yes
			}

			modifier = {
				conscription = 0.1
				industrial_capacity_factory = -0.1
				industrial_capacity_dockyard = -0.1
				production_speed_buildings_factor = -0.1
				training_time_factor = 0.2
			}

			ai_will_do = {
				factor = 10
				modifier = { #one step at a time
					factor = 0
					NOT = { has_idea = extensive_conscription }
				}
				modifier = { #already mobilising
					factor = 0
					NOT = { check_variable = { target_conscription_amount = current_conscription_amount } }
				}
				modifier = { #ignore if high on manpower
					factor = 0
					manpower_per_military_factory > 3000
				}
				modifier = { #lower if decent manpower
					factor = 0.5
					manpower_per_military_factory > 1000
				}
				modifier = { #prio if low on manpower
					factor = 20
					manpower_per_military_factory < 700
				}
			}
		}

		all_adults_serve = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea all_adults_serve" }
			on_remove = { set_variable = { previous_manpower_law = token:all_adults_serve } }
			level = 2
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				all_adults_serve_available = yes
			}

			modifier = {
				conscription = 0.2
				industrial_capacity_factory = -0.3
				industrial_capacity_dockyard = -0.3
				production_speed_buildings_factor = -0.3
				#XP from reinforcement penalty (small)
				training_time_factor = 0.3
			}

			ai_will_do = {
				factor = 10
				modifier = { #one step at a time
					factor = 0
					NOT = { has_idea = service_by_requirement }
				}
				modifier = { #already mobilising
					factor = 0
					NOT = { check_variable = { target_conscription_amount = current_conscription_amount } }
				}
				modifier = { #ignore if high on manpower
					factor = 0
					manpower_per_military_factory > 2800
				}
				modifier = { #lower if decent manpower
					factor = 0.5
					manpower_per_military_factory > 1000
				}
				modifier = { #prio if low on manpower
					factor = 20
					manpower_per_military_factory < 600
				}
			}
		}

		scraping_the_barrel = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea scraping_the_barrel" }
			on_remove = { set_variable = { previous_manpower_law = token:scraping_the_barrel } }
			level = 1
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				scraping_the_barrel_available = yes
			}

			modifier = {
				conscription = 0.25
				industrial_capacity_factory = -0.4
				industrial_capacity_dockyard = -0.4
				production_speed_buildings_factor = -0.4
				training_time_factor = 0.5
			}

			ai_will_do = {
				factor = 10
				modifier = { #one step at a time
					factor = 0
					NOT = { has_idea = all_adults_serve }
				}
				modifier = { #already mobilising
					factor = 0
					NOT = { check_variable = { target_conscription_amount = current_conscription_amount } }
				}
				modifier = { #ignore if high on manpower
					factor = 0
					manpower_per_military_factory > 5000
				}
				modifier = { #lower if decent manpower
					factor = 0.5
					manpower_per_military_factory > 1000
				}
				modifier = { #prio if low on manpower
					factor = 20
					manpower_per_military_factory < 500
				}
			}
		}
	}
	constitution_form = {
		law = yes 
		use_list_view = yes 
		absolute_monarchy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea absolute_monarchy" }
			on_remove = { set_variable = { previous_constitution_form = token:absolute_monarchy } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no 
			}
			visible = {
				is_monarchy = yes
			}
		}
		crowned_presidency = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea crowned_presidency" }
			on_remove = { set_variable = { previous_constitution_form = token:crowned_presidency } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no 
			}
			visible = {
				is_monarchy = yes
			}
		}
		semi_constitutional_monarchy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea semi_constitutional_monarchy" }
			on_remove = { set_variable = { previous_constitution_form = token:semi_constitutional_monarchy } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
				is_monarchy = yes
			}
		}
		constitutional_monarchy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea constitutional_monarchy" }
			on_remove = { set_variable = { previous_constitution_form = token:constitutional_monarchy } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
				is_monarchy = yes
			}
		}
		crowned_republic = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea crowned_republic" }
			on_remove = { set_variable = { previous_constitution_form = token:crowned_republic } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
				is_monarchy = yes
			}
		}
		presidential_republic = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea presidential_republic" }
			on_remove = { set_variable = { previous_constitution_form = token:presidential_republic } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
				is_monarchy = no
			}
		}
		semi_presidential_republic = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea semi_presidential_republic" }
			on_remove = { set_variable = { previous_constitution_form = token:semi_presidential_republic } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
				is_monarchy = no
			}
		}
		parliamentary_republic = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea parliamentary_republic" }
			on_remove = { set_variable = { previous_constitution_form = token:parliamentary_republic } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
				is_monarchy = no
			}
		}
		totalitarian_dictatorship = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea totalitarian_dictatorship" }
			on_remove = { set_variable = { previous_constitution_form = token:totalitarian_dictatorship } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		paternalism_dictatorship = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea paternalism_dictatorship" }
			on_remove = { set_variable = { previous_constitution_form = token:paternalism_dictatorship } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		paternalism_democracy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea paternalism_democracy" }
			on_remove = { set_variable = { previous_constitution_form = token:paternalism_democracy } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		workers_council = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea workers_council" }
			on_remove = { set_variable = { previous_constitution_form = token:workers_council } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		theocracy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea theocracy" }
			on_remove = { set_variable = { previous_constitution_form = token:theocracy } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		oligarchy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea oligarchy" }
			on_remove = { set_variable = { previous_constitution_form = token:oligarchy } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		technocracy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea technocracy" }
			on_remove = { set_variable = { previous_constitution_form = token:technocracy } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		corporatist_state = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea corporatist_state" }
			on_remove = { set_variable = { previous_constitution_form = token:corporatist_state } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		anarchy = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea anarchy" }
			on_remove = { set_variable = { previous_constitution_form = token:anarchy } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		colonial_administration = { 
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea colonial_administration" }
			on_remove = { set_variable = { previous_constitution_form = token:colonial_administration } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
				is_puppet = yes
			}
		}
		power_vacuum = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea power_vacuum" }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				custom_trigger_tooltip = {
					tooltip = government_is_collapsed
					has_country_flag = TFH_power_vacuum
				}
			}

			modifier = {
				political_power_factor = -0.3
				stability_factor = -0.3
				war_support_factor = -0.3
				consumer_goods_factor = 0.3
			}
		}
	}
	constitutional_state_type = {
		law = yes 
		use_list_view = yes

		unitary_state = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea unitary_state" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:unitary_state } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
				#is_unitary_state = yes 
			}
		}

		local_authority_empowerment = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea local_authority_empowerment" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:local_authority_empowerment } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		regionalized_unitary = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea regionalized_unitary" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:regionalized_unitary } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		asymmatric_federation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea asymmatric_federation" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:asymmatric_federation } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		union_of_soviets = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea union_of_soviets" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:union_of_soviets } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		states_federalists = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea states_federalists" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:states_federalists } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		european_federalists = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea european_federalists" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:european_federalists } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		federal_state = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea federal_state" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:federal_state } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		confederation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea confederation" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:confederation } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		eidgenossenschaft = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea eidgenossenschaft" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:eidgenossenschaft } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		central_authority_empowerment = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea central_authority_empowerment" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:central_authority_empowerment } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		disrupted_regionalized_unitary = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea disrupted_regionalized_unitary" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:disrupted_regionalized_unitary } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {
			
			}
		}

		weakened_local_authority = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea weakened_local_authority" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:weakened_local_authority } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		hispanic_confederation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea hispanic_confederation" }
			on_remove = { set_variable = { previous_constitutional_state_type = token:hispanic_confederation } }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}
		
		anarchist_federation = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea anarchist_federation" }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				always = no
			}
			visible = {

			}
		}

		failed_state = {
			on_add = { log = "[GetDateText]: [Root.GetName]: add idea failed_state" }
			cost = 0
			removal_cost = -1
			cancel_if_invalid = no

			available = {
				custom_trigger_tooltip = {
					tooltip = nation_failed_to_survive
					has_country_flag = TFH_failed_state
				}
			}

			modifier = {
				political_power_factor = -0.5
				stability_factor = -0.5
				war_support_factor = -0.5
				consumer_goods_factor = 0.5
			}
		}
	}
	executive_mode = {
		law = yes
		use_list_view = yes
		executive_directory = {

		}
		partylaw = {

		}
		executive_hos = {

		}
		joint_executive = {

		}
		executive_premiership = {

		}
		parliamentary_cabinet = {

		}
		collapsed_executive = { 

		}
	}
	legislative_mode = {
		law = yes
		use_list_view = yes
		parliamentary_sovereignty = {
			
		}
		golden_freedoms_sejm = {

		}
		well_functioned_parliament = {

		}
		rubberstamp_parliament = {

		}
		no_parliament = {

		}
	}
	judicial_mode = {
		law = yes
		use_list_view = yes
		judicatory_supremacy = {

		}
		well_functioned_courts = {

		}
		executive_dominated_judiciary = {

		}
		vigilante_judiciary = {

		}
		night_of_hell = {

		}
	}
	administrative_mode = {
		law = yes
		use_list_view = yes
		centralized_bureaucracy = {

		}
		parallel_bureaucracy = {

		}
		decentralized_bureaucracy = {

		}
		procrastinated_bureaucracy = {

		}
		no_bureaucracy = {

		}
	}
	people_state_relationship = {
		law = yes
		use_list_view = yes
		all_bow_to_leader = {

		}
		all_bow_to_law = {

		}
		all_and_law_equilibrium = {

		}
		laws_bow_to_all = {

		}
		land_of_no_laws = {

		}
	}
	culture_empowerment = {
		law = yes
		use_list_view = yes
		single_culture_nation = {

		}
		cultural_hegemony = {

		}
		school_of_conservative = {

		}
		cultural_autonomy = {

		}
		multicultural_nation = {

		}
	}
	economic_model = {
		law = yes
		use_list_view = yes
		land_of_conglomerates = {

		}
		one_third_rule = {

		}
		half_owned_portion = {

		}
		government_rules_the_game = {

		}
		business_of_the_state = {

		}
	}
}
